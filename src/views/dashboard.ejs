
<!-- 页面标题 -->
<div class="dashboard-header">
    <div class="header-content">
        <div class="header-title">
            <h1><i class="bi bi-cash-coin"></i> 数钱系统</h1>
            <p>专业的产品成本管理和毛利润分析平台</p>
        </div>
        <div class="header-actions">
            <button class="btn-change-password" onclick="openChangePasswordModal()">
                <i class="bi bi-key"></i>
                修改密码
            </button>
            <button class="btn btn-refresh" onclick="refreshData()">
                <i class="bi bi-arrow-clockwise"></i>
                刷新数据
            </button>
            <button class="btn btn-export" onclick="exportData()">
                <i class="bi bi-download"></i>
                导出数据
            </button>
            <button class="btn-logout" onclick="logout()">
                <i class="bi bi-box-arrow-right"></i>
                退出登录
            </button>
        </div>
    </div>
</div>

<!-- 搜索筛选区域 -->
<div class="search-section">
    <!-- 搜索框 -->
    <div class="search-input-container">
        <i class="bi bi-search search-icon"></i>
        <input type="text" id="searchInput" placeholder="搜索产品信息..." onkeyup="filterProducts()">
    </div>

    <!-- 产品统计信息和分页控制 -->
    <div class="stats-and-pagination">
        <div class="product-stats">
            <span id="productStatsText">共找到 76 个产品，当前显示第 1 - 50 个</span>
        </div>
        <div class="pagination-controls">
            <div class="items-per-page">
                <label>每页显示：</label>
                <select id="itemsPerPage" onchange="changeItemsPerPage()">
                    <option value="20">20</option>
                    <option value="50" selected>50</option>
                    <option value="100">100</option>
                </select>
            </div>
        </div>
    </div>

    <!-- 产品类型筛选 -->
    <div class="category-filter-section">
        <div class="category-filter-header">
            <i class="bi bi-funnel"></i>
            <span>按产品类型筛选</span>
        </div>
        <div class="category-buttons" id="categoryButtons">
            <button class="category-btn active" data-category="" onclick="selectCategory('')">
                全部 <span class="count">(76)</span>
            </button>
        </div>
    </div>
</div>

<!-- 产品成本表格 -->
<div class="table-section">
    <div class="table-header">
        <div class="table-info">
            <span id="productCount">0</span> 个产品
        </div>
    </div>

    <div class="table-container">
        <table class="cost-table" id="costTable">
            <thead>
                <tr>
                    <th class="col-model">产品型号</th>
                    <th class="col-cost">总成本</th>
                    <th class="col-price">含税价</th>
                    <th class="col-profit">毛利</th>
                    <th class="col-margin">毛利率</th>
                    <th class="col-actions">操作</th>
                </tr>
            </thead>
            <tbody id="tableBody">
                <!-- 数据将通过JavaScript动态加载 -->
            </tbody>
        </table>
    </div>

    <!-- 加载状态 -->
    <div class="loading-state" id="loadingState">
        <div class="spinner"></div>
        <p>正在加载数据...</p>
    </div>

    <!-- 空状态 -->
    <div class="empty-state" id="emptyState" style="display: none;">
        <i class="bi bi-inbox"></i>
        <h4>暂无数据</h4>
        <p>没有找到符合条件的产品</p>
    </div>
</div>

<!-- 分页导航 -->
<div class="pagination-section" id="paginationSection">
    <div class="pagination-info">
        <span id="paginationInfo">显示第 1-50 项，共 76 项</span>
    </div>
    <div class="pagination-nav">
        <button class="pagination-btn" id="prevBtn" onclick="goToPage(currentPage - 1)" disabled>
            <i class="bi bi-chevron-left"></i>
            上一页
        </button>
        <div class="pagination-numbers" id="paginationNumbers">
            <!-- 页码按钮将通过JavaScript动态生成 -->
        </div>
        <button class="pagination-btn" id="nextBtn" onclick="goToPage(currentPage + 1)">
            下一页
            <i class="bi bi-chevron-right"></i>
        </button>
    </div>
</div>

<!-- 成本编辑弹出框 -->
<div class="cost-modal-overlay" id="costModalOverlay" style="display: none;">
    <div class="cost-modal">
        <div class="cost-modal-header">
            <h3>
                <i class="bi bi-calculator-fill"></i>
                成本详情编辑
            </h3>
            <button class="cost-modal-close" onclick="closeCostModal()" title="点击关闭">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="cost-modal-body">
            <div class="cost-sections">
                <div class="cost-container">
                    <!-- 左侧：组装模式成本 -->
                    <div class="cost-section-left">
                        <div class="section-header">
                            <h4>组装模式成本</h4>
                            <p>方法1：总成本 = 机身1 + 机身2 + LED + 驱动 + 组装 + 其他</p>
                        </div>
                        <div class="cost-grid-new">
                            <div class="vendor-column">
                                <div class="cost-item-new">
                                    <label>机身1供应商</label>
                                    <input type="text" id="vendorBody1" placeholder="供应商名称" class="vendor-input">
                                </div>
                                <div class="cost-item-new">
                                    <label>机身2供应商</label>
                                    <input type="text" id="vendorBody2" placeholder="供应商名称" class="vendor-input">
                                </div>
                                <div class="cost-item-new">
                                    <label>LED供应商</label>
                                    <input type="text" id="vendorLED" placeholder="供应商名称" class="vendor-input">
                                </div>
                                <div class="cost-item-new">
                                    <label>驱动供应商</label>
                                    <input type="text" id="vendorDriver" placeholder="供应商名称" class="vendor-input">
                                </div>
                                <div class="cost-item-new">
                                    <label>组装供应商</label>
                                    <input type="text" id="vendorAssemble" placeholder="供应商名称" class="vendor-input">
                                </div>
                                <div class="cost-item-new">
                                    <label>其他供应商</label>
                                    <input type="text" id="vendorOther" placeholder="供应商名称" class="vendor-input">
                                </div>
                            </div>
                            <div class="cost-column">
                                <div class="cost-item-new">
                                    <label>机身1成本</label>
                                    <input type="number" id="costBody1" step="0.01" min="0" placeholder="0.00" class="cost-input">
                                </div>
                                <div class="cost-item-new">
                                    <label>机身2成本</label>
                                    <input type="number" id="costBody2" step="0.01" min="0" placeholder="0.00" class="cost-input">
                                </div>
                                <div class="cost-item-new">
                                    <label>LED成本</label>
                                    <input type="number" id="costLED" step="0.01" min="0" placeholder="0.00" class="cost-input">
                                </div>
                                <div class="cost-item-new">
                                    <label>驱动成本</label>
                                    <input type="number" id="costDriver" step="0.01" min="0" placeholder="0.00" class="cost-input">
                                </div>
                                <div class="cost-item-new">
                                    <label>组装成本</label>
                                    <input type="number" id="costAssemble" step="0.01" min="0" placeholder="0.00" class="cost-input">
                                </div>
                                <div class="cost-item-new">
                                    <label>其他成本</label>
                                    <input type="number" id="costOther" step="0.01" min="0" placeholder="0.00" class="cost-input">
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 右侧：ODM模式成本和计算结果 -->
                    <div class="cost-section-right">
                        <div class="section-header">
                            <h4>ODM模式成本</h4>
                            <p>方法2：总成本 = ODM成本</p>
                        </div>
                        <div class="odm-container">
                            <div class="cost-item-new">
                                <label>ODM供应商</label>
                                <input type="text" id="vendorODM" placeholder="ODM供应商名称" class="vendor-input">
                            </div>
                            <div class="cost-item-new">
                                <label>ODM成本</label>
                                <input type="number" id="costODM" step="0.01" min="0" placeholder="0.00" class="cost-input">
                            </div>
                        </div>

                        <!-- 计算结果放在右侧 -->
                        <div class="calculation-result right-result">
                            <div class="calc-info">
                                <div class="calc-method">
                                    <span class="label">当前计算方法：</span>
                                    <span id="calcMethod" class="method">组装模式</span>
                                </div>
                                <div class="calc-total">
                                    <span class="label">总成本：</span>
                                    <span id="calcTotal" class="total">¥0.00</span>
                                </div>
                            </div>
                        </div>

                        <!-- 按钮放在右侧底部 -->
                        <div class="right-footer">
                            <button class="btn-cancel" onclick="closeCostModal()" title="取消编辑并关闭">
                                <i class="bi bi-x-circle"></i>
                                取消
                            </button>
                            <button class="btn-save" onclick="saveCostData()">
                                <i class="bi bi-check-circle"></i>
                                保存成本
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 价格编辑弹出框 -->
<div class="cost-modal-overlay" id="priceModalOverlay" style="display: none;">
    <div class="cost-modal price-modal">
        <div class="cost-modal-header">
            <h3>
                <i class="bi bi-currency-dollar"></i>
                价格详情编辑
            </h3>
            <button class="cost-modal-close" onclick="closePriceModal()" title="点击关闭">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="cost-modal-body">
            <div class="price-form">
                <div class="form-group">
                    <label for="unitPrice">含税价格 (¥)</label>
                    <input type="number" id="unitPrice" step="0.01" min="0" placeholder="请输入含税价格">
                </div>

                <div class="price-footer">
                    <button class="btn-cancel" onclick="closePriceModal()" title="取消编辑并关闭">
                        <i class="bi bi-x-circle"></i>
                        取消
                    </button>
                    <button class="btn-save" onclick="savePriceData()">
                        <i class="bi bi-check-circle"></i>
                        保存价格
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 修改密码弹出框 -->
<div class="cost-modal-overlay" id="changePasswordModalOverlay" style="display: none;">
    <div class="cost-modal change-password-modal">
        <div class="cost-modal-header">
            <h3>
                <i class="bi bi-person-gear"></i>
                修改密码和邮箱
            </h3>
            <button class="cost-modal-close" onclick="closeChangePasswordModal()" title="点击关闭">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="cost-modal-body">
            <div class="password-form">
                <!-- 邮箱修改部分 -->
                <div class="form-section">
                    <h4><i class="bi bi-envelope"></i> 邮箱设置</h4>
                    <div class="form-group">
                        <label for="currentEmail">当前邮箱</label>
                        <input type="email" id="currentEmail" placeholder="当前邮箱地址" readonly>
                    </div>
                    <div class="form-group">
                        <label for="newEmail">新邮箱</label>
                        <input type="email" id="newEmail" placeholder="请输入新邮箱地址">
                    </div>
                </div>

                <!-- 密码修改部分 -->
                <div class="form-section">
                    <h4><i class="bi bi-key"></i> 密码设置</h4>
                    <div class="form-group">
                        <label for="currentPassword">当前密码</label>
                        <input type="password" id="currentPassword" placeholder="请输入当前密码" required>
                    </div>

                    <div class="form-group">
                        <label for="newPassword">新密码</label>
                        <input type="password" id="newPassword" placeholder="请输入新密码">
                    </div>

                    <div class="form-group">
                        <label for="confirmPassword">确认新密码</label>
                        <input type="password" id="confirmPassword" placeholder="请再次输入新密码">
                    </div>
                </div>

                <div class="password-footer">
                    <button class="btn-cancel" onclick="closeChangePasswordModal()" title="取消修改并关闭">
                        <i class="bi bi-x-circle"></i>
                        取消
                    </button>
                    <button class="btn-save" onclick="saveAccountChanges()">
                        <i class="bi bi-check-circle"></i>
                        确认修改
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* 现代化样式 */
.dashboard-header {
    background: #2d3748;
    color: #ffffff;
    padding: 2rem 0;
    margin: -1.5rem -1.5rem 2rem -1.5rem;
    border-radius: 0 0 1rem 1rem;
    box-shadow: 0 4px 20px rgba(45, 55, 72, 0.4);
}

.header-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.header-title h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    color: #ffffff;
}

.header-title p {
    font-size: 1.1rem;
    margin: 0.5rem 0 0 0;
    opacity: 0.8;
    color: #e2e8f0;
}

.header-actions {
    display: flex;
    gap: 1rem;
}

.btn-refresh, .btn-export, .btn-change-password, .btn-logout {
    padding: 0.5rem 1rem;  /* 减小内边距，使按钮更精致 */
    border-radius: 0.4rem;  /* 稍微减小圆角 */
    font-weight: 300;      /* 纤细字重 */
    font-size: 0.8rem;     /* 进一步减小字体大小 */
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.4rem;           /* 减小图标和文字间距 */
    border: none;
}

.btn-refresh, .btn-export, .btn-change-password, .btn-logout {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* 统一按钮样式 - 根据指定RGB色号的金属质感 */
.btn-change-password, .btn-refresh, .btn-export, .btn-logout, .btn-save, .btn-cancel {
    /* 基础色：上 RGB(126,127,128) 中 RGB(170,169,168) 下 RGB(215,212,210) */
    background: linear-gradient(to bottom, rgb(126,127,128), rgb(170,169,168), rgb(215,212,210));
    /* 高光在外侧，整体向外鼓 */
    box-shadow:
        0 1px 0 rgba(255,255,255,.85) inset,  /* 上高光 */
        0 -1px 0 rgba(0,0,0,.08) inset,       /* 下微影 */
        0 2px 3px rgba(0,0,0,.20);
    border: 1px solid rgba(0,0,0,.15);
    color: #2a2a2a;                          /* 正常状态：黑色文字 */
    border-radius: 8px;
    transition: all .2s ease;
    font-weight: 300;                        /* 纤细字重 */
    font-size: 0.8rem;                       /* 适当减小字体 */
}

.btn-change-password:hover, .btn-refresh:hover, .btn-export:hover, .btn-logout:hover, .btn-save:hover, .btn-cancel:hover {
    /* 悬停时变为指定的金色：上 RGB(242,188,140) 中 RGB(174,135,101) 下 RGB(105,82,62) */
    background: linear-gradient(to bottom, rgb(242,188,140), rgb(174,135,101), rgb(105,82,62));
    box-shadow:
        0 1px 0 rgba(255,255,255,.9) inset,   /* 强烈的上高光 */
        0 -1px 0 rgba(0,0,0,.15) inset,       /* 下微影 */
        0 3px 6px rgba(0,0,0,.3),             /* 外阴影 */
        0 0 8px rgba(242, 188, 140, 0.4);    /* 金色光晕 */
    color: white;                             /* 悬停状态：白色文字 */
    border: 1px solid rgba(174, 135, 101, 0.5);
    transform: translateY(-1px);              /* 轻微上浮效果 */
}



.search-section {
    background: white;
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 24px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    border: 1px solid #e5e7eb;
}

/* 搜索框样式 - 匹配截图 */
.search-input-container {
    position: relative;
    margin-bottom: 16px;
}

.search-icon {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: #9ca3af;
    font-size: 16px;
    z-index: 2;
}

.search-input-container input {
    width: 100%;
    height: 40px;
    padding: 8px 12px 8px 36px;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    font-size: 14px;
    color: #374151;
    background: #ffffff;
    transition: all 0.2s ease;
}

.search-input-container input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.search-input-container input::placeholder {
    color: #9ca3af;
    font-size: 14px;
}

/* 产品统计信息和分页控制 */
.stats-and-pagination {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
    gap: 16px;
}

.product-stats {
    padding: 12px 16px;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    font-size: 14px;
    color: #6b7280;
    flex: 1;
}

.pagination-controls {
    display: flex;
    align-items: center;
    gap: 12px;
}

.items-per-page {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
    color: #374151;
}

.items-per-page select {
    padding: 6px 12px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
    background: white;
    cursor: pointer;
}

.items-per-page select:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

/* 类型筛选区域 */
.category-filter-section {
    margin-top: 8px;
}

.category-filter-header {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 12px;
    font-size: 14px;
    font-weight: 500;
    color: #374151;
}

.category-filter-header i {
    color: #3b82f6;
    font-size: 16px;
}

.category-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
}

.category-btn {
    display: inline-flex;
    align-items: center;
    gap: 4px;
    padding: 6px 12px;
    border: 1px solid #d1d5db;
    background: #ffffff;
    color: #374151;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 400;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
}

.category-btn:hover {
    border-color: #3b82f6;
    color: #3b82f6;
    background: #eff6ff;
}

.category-btn.active {
    background: #3b82f6;
    border-color: #3b82f6;
    color: white;
}

.category-btn .count {
    font-size: 12px;
    opacity: 0.8;
}

/* 分页导航样式 */
.pagination-section {
    background: white;
    border-radius: 12px;
    padding: 20px;
    margin-top: 24px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    border: 1px solid #e5e7eb;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 16px;
}

.pagination-info {
    font-size: 14px;
    color: #6b7280;
}

.pagination-nav {
    display: flex;
    align-items: center;
    gap: 8px;
}

.pagination-btn {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 8px 16px;
    border: 1px solid #d1d5db;
    background: white;
    color: #374151;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.pagination-btn:hover:not(:disabled) {
    border-color: #3b82f6;
    color: #3b82f6;
    background: #eff6ff;
}

.pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.pagination-numbers {
    display: flex;
    gap: 4px;
}

.page-number {
    width: 36px;
    height: 36px;
    border: 1px solid #d1d5db;
    background: white;
    color: #374151;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.page-number:hover {
    border-color: #3b82f6;
    color: #3b82f6;
    background: #eff6ff;
}

.page-number.active {
    background: #3b82f6;
    border-color: #3b82f6;
    color: white;
}

.page-ellipsis {
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #9ca3af;
    font-size: 14px;
}

.operation-buttons {
    display: flex;
    gap: 0.4rem;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: flex-start;
}

/* 编辑价格按钮 - 使用统一样式 */
.btn-edit-price {
    /* 基础色：上 RGB(126,127,128) 中 RGB(170,169,168) 下 RGB(215,212,210) */
    background: linear-gradient(to bottom, rgb(126,127,128), rgb(170,169,168), rgb(215,212,210));
    /* 高光在外侧，整体向外鼓 */
    box-shadow:
        0 1px 0 rgba(255,255,255,.85) inset,  /* 上高光 */
        0 -1px 0 rgba(0,0,0,.08) inset,       /* 下微影 */
        0 2px 3px rgba(0,0,0,.20);
    border: 1px solid rgba(0,0,0,.15);
    color: #2a2a2a;                          /* 正常状态：黑色文字 */
    padding: 0.4rem 0.8rem;
    border-radius: 6px;
    font-size: 0.75rem;                       /* 适当减小字体 */
    font-weight: 300;                        /* 纤细字重 */
    cursor: pointer;
    transition: all .2s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.3rem;
}

.btn-edit-price:hover {
    /* 悬停时变为指定的金色：上 RGB(242,188,140) 中 RGB(174,135,101) 下 RGB(105,82,62) */
    background: linear-gradient(to bottom, rgb(242,188,140), rgb(174,135,101), rgb(105,82,62));
    box-shadow:
        0 1px 0 rgba(255,255,255,.9) inset,   /* 强烈的上高光 */
        0 -1px 0 rgba(0,0,0,.15) inset,       /* 下微影 */
        0 3px 6px rgba(0,0,0,.3),             /* 外阴影 */
        0 0 8px rgba(242, 188, 140, 0.4);    /* 金色光晕 */
    color: white;                             /* 悬停状态：白色文字 */
    border: 1px solid rgba(174, 135, 101, 0.5);
    transform: translateY(-1px);              /* 轻微上浮效果 */
}

.price-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.form-group label {
    font-weight: 600;
    color: #374151;
    font-size: 0.9rem;
}

.form-group input, .form-group textarea {
    padding: 0.75rem;
    border: 2px solid #E5E7EB;
    border-radius: 0.5rem;
    font-size: 0.9rem;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.8);
}

.form-group input:focus, .form-group textarea:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    background: white;
}

.form-group textarea {
    resize: vertical;
    min-height: 80px;
}

/* 价格模态框特定样式 */
.price-modal {
    max-width: 500px;
    width: 90%;
}

.price-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.price-footer {
    display: flex;
    justify-content: flex-end;
    gap: 0.8rem;
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid rgba(229, 231, 235, 0.5);
}

.table-section {
    background: white;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.table-header {
    background: #F9FAFB;
    padding: 1.5rem;
    border-bottom: 1px solid #E5E7EB;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.table-header h3 {
    margin: 0;
    color: #374151;
    font-weight: 600;
}

.table-info {
    color: #6B7280;
    font-weight: 500;
}

.table-container {
    overflow-x: auto;
}

.cost-table {
    width: 100%;
    border-collapse: collapse;
}

.cost-table th {
    background: #F3F4F6;
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    color: #374151;
    border-bottom: 2px solid #E5E7EB;
}

.cost-table td {
    padding: 1rem;
    border-bottom: 1px solid #F3F4F6;
    vertical-align: middle;
}

.cost-table tbody tr:hover {
    background: #F9FAFB;
}

.col-model { width: 22%; }
.col-cost { width: 14%; }
.col-price { width: 14%; }
.col-profit { width: 14%; }
.col-margin { width: 14%; }
.col-actions { width: 22%; }

.product-model {
    font-weight: 600;
    color: #374151;
}

.cost-value {
    font-weight: 600;
    color: #059669;
}

.price-value {
    font-weight: 600;
    color: #1F2937;
}

.profit-value {
    font-weight: 600;
}

.profit-positive { color: #059669; }
.profit-negative { color: #DC2626; }
.profit-neutral { color: #D97706; }

.margin-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-weight: 600;
    font-size: 0.875rem;
}

.margin-high { background: #D1FAE5; color: #065F46; }
.margin-medium { background: #FEF3C7; color: #92400E; }
.margin-low { background: #FEE2E2; color: #991B1B; }

/* 编辑成本按钮 - 使用统一样式 */
.btn-edit {
    /* 基础色：上 RGB(126,127,128) 中 RGB(170,169,168) 下 RGB(215,212,210) */
    background: linear-gradient(to bottom, rgb(126,127,128), rgb(170,169,168), rgb(215,212,210));
    /* 高光在外侧，整体向外鼓 */
    box-shadow:
        0 1px 0 rgba(255,255,255,.85) inset,  /* 上高光 */
        0 -1px 0 rgba(0,0,0,.08) inset,       /* 下微影 */
        0 2px 3px rgba(0,0,0,.20);
    border: 1px solid rgba(0,0,0,.15);
    color: #2a2a2a;                          /* 正常状态：黑色文字 */
    padding: 0.4rem 0.8rem;
    border-radius: 6px;
    font-weight: 300;                        /* 纤细字重 */
    font-size: 0.75rem;                       /* 适当减小字体 */
    transition: all .2s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.3rem;
    margin-right: 0.5rem;
}

.btn-edit:hover {
    /* 悬停时变为指定的金色：上 RGB(242,188,140) 中 RGB(174,135,101) 下 RGB(105,82,62) */
    background: linear-gradient(to bottom, rgb(242,188,140), rgb(174,135,101), rgb(105,82,62));
    box-shadow:
        0 1px 0 rgba(255,255,255,.9) inset,   /* 强烈的上高光 */
        0 -1px 0 rgba(0,0,0,.15) inset,       /* 下微影 */
        0 3px 6px rgba(0,0,0,.3),             /* 外阴影 */
        0 0 8px rgba(242, 188, 140, 0.4);    /* 金色光晕 */
    color: white;                             /* 悬停状态：白色文字 */
    border: 1px solid rgba(174, 135, 101, 0.5);
    transform: translateY(-1px);              /* 轻微上浮效果 */
}

.loading-state, .empty-state {
    text-align: center;
    padding: 3rem;
    color: #6B7280;
}

.spinner {
    width: 3rem;
    height: 3rem;
    border: 3px solid #E5E7EB;
    border-top: 3px solid #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.empty-state i {
    font-size: 4rem;
    margin-bottom: 1rem;
    color: #D1D5DB;
}

/* 成本编辑弹出框样式 */
/* 注意：已移除点击背景关闭功能，防止意外数据丢失 */
.cost-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    animation: fadeIn 0.3s ease-out;
    /* 用户必须使用明确的关闭按钮来关闭模态框 */
}

.cost-modal {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 1.5rem;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    width: 100%;
    max-width: 800px;
    max-height: 85vh;
    overflow: hidden;
    animation: slideUp 0.3s ease-out;
}

.cost-modal-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1rem 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-radius: 1.5rem 1.5rem 0 0;
}

.cost-modal-header h3 {
    margin: 0;
    font-size: 1.2rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.cost-modal-close {
    background: rgba(255, 255, 255, 0.15);
    border: 2px solid rgba(255, 255, 255, 0.3);
    color: white;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1.1rem;
    font-weight: bold;
    position: relative;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}

.cost-modal-close:hover {
    background: rgba(255, 255, 255, 0.25);
    border-color: rgba(255, 255, 255, 0.5);
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

.cost-modal-close:active {
    transform: scale(0.95);
}

.cost-modal-close i {
    font-size: 1rem;
    font-weight: bold;
}

.cost-modal-close:hover::after {
    content: '点击关闭';
    position: absolute;
    top: -2.8rem;
    right: 0;
    background: rgba(0, 0, 0, 0.9);
    color: white;
    padding: 0.4rem 0.8rem;
    border-radius: 0.4rem;
    font-size: 0.75rem;
    white-space: nowrap;
    z-index: 1000;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
}

.cost-modal-body {
    padding: 1.2rem;
    max-height: calc(85vh - 140px);
    overflow-y: auto;
}

.cost-sections {
    display: flex;
    flex-direction: column;
    gap: 1.2rem;
}

/* 新的布局样式 */
.cost-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
    align-items: start;
}

.cost-section-left, .cost-section-right {
    background: rgba(249, 250, 251, 0.8);
    border-radius: 0.8rem;
    padding: 1rem;
    border: 1px solid rgba(229, 231, 235, 0.5);
    height: fit-content;
}

.cost-grid-new {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 1rem;
}

.vendor-column, .cost-column {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
}

.cost-item-new {
    display: flex;
    flex-direction: column;
    gap: 0.3rem;
}

.cost-item-new label {
    font-size: 0.8rem;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.2rem;
}

.vendor-input {
    padding: 0.5rem;
    border: 2px solid #E5E7EB;
    border-radius: 0.4rem;
    font-size: 0.8rem;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.8);
    height: 2.2rem;
    width: 100%;
}

.cost-input {
    padding: 0.5rem;
    border: 2px solid #E5E7EB;
    border-radius: 0.4rem;
    font-size: 0.8rem;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.8);
    height: 2.2rem;
    width: 80px;
}

.vendor-input:focus, .cost-input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    background: white;
}

.odm-container {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
    margin-bottom: 1.5rem;
}

.right-result {
    margin: 1.5rem 0;
    background: linear-gradient(135deg, #EEF2FF 0%, #E0E7FF 100%);
    border-radius: 0.8rem;
    padding: 1rem;
    border: 1px solid rgba(102, 126, 234, 0.2);
}

.right-footer {
    display: flex;
    justify-content: flex-end;
    gap: 0.8rem;
    margin-top: 1rem;
}

.cost-section {
    background: rgba(249, 250, 251, 0.8);
    border-radius: 0.8rem;
    padding: 1rem;
    border: 1px solid rgba(229, 231, 235, 0.5);
}

.section-header {
    margin-bottom: 1rem;
}

.section-header h4 {
    color: #374151;
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0 0 0.3rem 0;
    display: flex;
    align-items: center;
    gap: 0.4rem;
}

.section-header p {
    color: #6B7280;
    margin: 0;
    font-size: 0.8rem;
}

.cost-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 0.8rem;
}

.odm-grid {
    grid-template-columns: 1fr 1fr;
    max-width: 500px;
}

.cost-item {
    display: flex;
    flex-direction: column;
    gap: 0.3rem;
}

.cost-item label {
    font-size: 0.8rem;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.2rem;
}

.cost-item input {
    padding: 0.5rem;
    border: 2px solid #E5E7EB;
    border-radius: 0.4rem;
    font-size: 0.8rem;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.8);
    height: 2.2rem;
}

.cost-item input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    background: white;
}

.calculation-result {
    background: linear-gradient(135deg, #EEF2FF 0%, #E0E7FF 100%);
    border-radius: 0.8rem;
    padding: 1rem;
    margin-top: 1.2rem;
    border: 1px solid rgba(102, 126, 234, 0.2);
}

.calc-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.8rem;
}

.calc-method, .calc-total {
    display: flex;
    align-items: center;
    gap: 0.4rem;
}

.calc-method .label, .calc-total .label {
    font-weight: 500;
    color: #374151;
    font-size: 0.85rem;
}

.calc-method .method {
    background: rgba(102, 126, 234, 0.1);
    color: #667eea;
    padding: 0.2rem 0.6rem;
    border-radius: 0.8rem;
    font-weight: 600;
    font-size: 0.8rem;
}

.calc-total .total {
    background: rgba(5, 150, 105, 0.1);
    color: #059669;
    padding: 0.4rem 0.8rem;
    border-radius: 0.8rem;
    font-weight: 700;
    font-size: 1.1rem;
}

.cost-modal-footer {
    background: rgba(249, 250, 251, 0.8);
    padding: 1rem 1.2rem;
    display: flex;
    justify-content: flex-end;
    gap: 0.8rem;
    border-top: 1px solid rgba(229, 231, 235, 0.5);
}

/* 模态框按钮样式已在统一按钮样式中定义，无需额外样式 */

/* 修改密码和邮箱模态框样式 */
.change-password-modal {
    max-width: 500px;
}

.form-section {
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: #f8f9fa;
    border-radius: 0.5rem;
    border-left: 4px solid #3498db;
}

.form-section:last-child {
    margin-bottom: 0;
}

.form-section h4 {
    margin: 0 0 1rem 0;
    color: #2c3e50;
    font-size: 1.1rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.form-section h4 i {
    color: #3498db;
}

.password-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.password-form .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.password-form label {
    font-weight: 600;
    color: #374151;
    font-size: 0.9rem;
}

.password-form input {
    padding: 0.75rem;
    border: 2px solid #E5E7EB;
    border-radius: 0.5rem;
    font-size: 0.9rem;
    transition: border-color 0.3s ease;
}

.password-form input:focus {
    border-color: #667eea;
    outline: none;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.password-footer {
    display: flex;
    justify-content: flex-end;
    gap: 0.8rem;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid rgba(229, 231, 235, 0.5);
}

/* 动画效果 */
@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

@keyframes slideUp {
    from {
        opacity: 0;
        transform: translateY(50px) scale(0.95);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

/* 响应式设计 */
@media (max-width: 768px) {
    .header-content {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
    }

    .search-content {
        grid-template-columns: 1fr;
    }

    .cost-table {
        font-size: 0.875rem;
    }

    .cost-table th,
    .cost-table td {
        padding: 0.75rem 0.5rem;
    }

    /* 弹出框响应式 */
    .cost-modal-overlay {
        padding: 1rem;
    }

    .cost-modal {
        max-width: 100%;
        max-height: 95vh;
    }

    .cost-modal-header {
        padding: 1rem 1.5rem;
    }

    .cost-modal-header h3 {
        font-size: 1.25rem;
    }

    .cost-modal-body {
        padding: 1.5rem;
    }

    .cost-container {
        grid-template-columns: 1fr;
    }

    .cost-grid-new {
        grid-template-columns: 1fr;
    }

    .vendor-input, .cost-input {
        width: 100%;
    }

    .calc-info {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }

    .right-footer {
        flex-direction: column;
        gap: 0.75rem;
    }

    .btn-cancel, .btn-save {
        width: 100%;
        justify-content: center;
    }

    /* 响应式分页 */
    .pagination-section {
        flex-direction: column;
        gap: 12px;
    }

    .pagination-nav {
        flex-wrap: wrap;
        justify-content: center;
    }

    .pagination-numbers {
        order: -1;
        margin-bottom: 8px;
    }

    /* 响应式统计和分页控制 */
    .stats-and-pagination {
        flex-direction: column;
        align-items: stretch;
        gap: 12px;
    }

    .pagination-controls {
        justify-content: center;
    }

    /* 响应式头部按钮 */
    .header-actions {
        flex-wrap: wrap;
        gap: 8px;
    }

    .btn-refresh, .btn-export, .btn-change-password {
        flex: 1;
        min-width: 120px;
        justify-content: center;
    }
}
</style>

<script>
let currentProductId = null;
let productsData = [];
let filteredProducts = [];
let currentPage = 1;
let itemsPerPage = 50;
let totalPages = 1;

document.addEventListener('DOMContentLoaded', function() {
    loadProductsData();
});

async function loadProductsData() {
    try {
        showLoading(true);

        const response = await fetch('/api/cost-pricing/products');
        const result = await response.json();

        if (result.success) {
            productsData = result.data;
            renderTable(productsData);
            populateFilters();
            updateProductStats();
            updateProductCount(productsData.length);
        } else {
            showError('加载数据失败：' + result.message);
        }
    } catch (error) {
        console.error('加载产品数据失败:', error);
        showError('加载数据失败，请检查网络连接');
    } finally {
        showLoading(false);
    }
}

// 新增：保持筛选状态的数据加载函数
async function loadProductsDataWithStatePreservation() {
    const savedCategory = currentCategoryFilter;
    const savedSearch = document.getElementById('searchInput').value;

    await loadProductsData();

    // 恢复筛选状态
    if (savedCategory) {
        selectCategory(savedCategory);
    }
    if (savedSearch) {
        document.getElementById('searchInput').value = savedSearch;
        filterProducts();
    }
}

function renderTable(products) {
    const tbody = document.getElementById('tableBody');
    filteredProducts = products;

    if (products.length === 0) {
        document.getElementById('emptyState').style.display = 'block';
        document.getElementById('paginationSection').style.display = 'none';
        tbody.innerHTML = '';
        return;
    }

    document.getElementById('emptyState').style.display = 'none';
    document.getElementById('paginationSection').style.display = 'flex';

    // 计算分页
    totalPages = Math.ceil(products.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedProducts = products.slice(startIndex, endIndex);

    tbody.innerHTML = paginatedProducts.map(product => {
        const totalCost = calculateTotalCost(product);
        const unitPrice = product.originalData.pricing?.unitPrice || 0;
        const profit = unitPrice - totalCost;
        const profitMargin = totalCost > 0 ? ((profit / unitPrice) * 100) : 0;

        return `
            <tr>
                <td>
                    <div class="product-model">${product.originalData.model || '未命名'}</div>
                </td>
                <td>
                    <span class="cost-value">
                        ¥${totalCost.toFixed(2)}
                    </span>
                </td>
                <td>
                    <span class="price-value">¥${unitPrice.toFixed(2)}</span>
                </td>
                <td>
                    <span class="profit-value ${profit >= 0 ? 'profit-positive' : 'profit-negative'}">
                        ¥${profit.toFixed(2)}
                    </span>
                </td>
                <td>
                    <span class="margin-badge ${getMarginClass(profitMargin)}">
                        ${profitMargin.toFixed(1)}%
                    </span>
                </td>
                <td class="operation-buttons">
                    <button class="btn-edit" onclick="openCostModal('${product._id}')">
                        <i class="bi bi-pencil"></i> 编辑成本
                    </button>
                    <button class="btn-edit-price" onclick="openPriceModal('${product._id}')">
                        <i class="bi bi-currency-dollar"></i> 编辑价格
                    </button>
                </td>
            </tr>
        `;
    }).join('');

    // 更新分页控件
    updatePagination();
}

function calculateTotalCost(product) {
    const data = product.originalData;

    const odmCost = data.costODM || 0;

    if (odmCost > 0) {
        // 方法2：ODM模式 - 只使用ODM成本
        return odmCost;
    } else {
        // 方法1：组装模式 - 使用所有组装成本
        return (data.costBody1 || 0) +
               (data.costBody2 || 0) +
               (data.costLED || 0) +
               (data.costDriver || 0) +
               (data.costAssemble || 0) +
               (data.costOther || 0);
    }
}

function getMarginClass(margin) {
    if (margin >= 20) return 'margin-high';
    if (margin >= 10) return 'margin-medium';
    return 'margin-low';
}

function populateFilters() {
    const categories = [...new Set(productsData.map(p => p.category))];
    const categoryButtons = document.getElementById('categoryButtons');

    // 计算每个类别的产品数量
    const categoryCounts = {};
    productsData.forEach(product => {
        const category = product.category || '';
        categoryCounts[category] = (categoryCounts[category] || 0) + 1;
    });

    // 保存当前选中的类别
    const currentActive = currentCategoryFilter;

    // 清空现有按钮
    categoryButtons.innerHTML = '';

    // 添加"全部"按钮
    const allButton = document.createElement('button');
    allButton.className = 'category-btn' + (currentActive === '' ? ' active' : '');
    allButton.setAttribute('data-category', '');
    allButton.innerHTML = `全部 <span class="count">(${productsData.length})</span>`;
    allButton.onclick = function() { selectCategory(''); };
    categoryButtons.appendChild(allButton);

    // 添加分类按钮
    categories.forEach(category => {
        if (category) {  // 确保分类不为空
            const count = categoryCounts[category] || 0;
            const button = document.createElement('button');
            button.className = 'category-btn' + (currentActive === category ? ' active' : '');
            button.setAttribute('data-category', category);
            button.innerHTML = `${category} <span class="count">(${count})</span>`;
            button.onclick = function() { selectCategory(category); };
            categoryButtons.appendChild(button);
        }
    });
}

let currentCategoryFilter = '';

function selectCategory(category) {
    currentCategoryFilter = category;

    // Update button states
    document.querySelectorAll('.category-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-category="${category}"]`).classList.add('active');

    filterProducts();
}

function filterProducts() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();

    let filtered = productsData.filter(product => {
        const model = (product.originalData.model || '').toLowerCase();
        const brand = (product.originalData.brand || '').toLowerCase();
        const matchesSearch = model.includes(searchTerm) || brand.includes(searchTerm);

        const matchesCategory = !currentCategoryFilter || product.category === currentCategoryFilter;

        return matchesSearch && matchesCategory;
    });

    renderTable(filtered);
    updateProductCount(filtered.length);
    updateProductStats(filtered.length);
}

// 更新产品统计信息
function updateProductStats(filteredCount = null) {
    const statsElement = document.getElementById('productStatsText');
    const totalCount = productsData.length;
    const displayCount = filteredCount !== null ? filteredCount : totalCount;

    if (displayCount === totalCount) {
        const startItem = (currentPage - 1) * itemsPerPage + 1;
        const endItem = Math.min(currentPage * itemsPerPage, totalCount);
        statsElement.textContent = `共找到 ${totalCount} 个产品，当前显示第 ${startItem} - ${endItem} 个`;
    } else {
        const startItem = (currentPage - 1) * itemsPerPage + 1;
        const endItem = Math.min(currentPage * itemsPerPage, displayCount);
        statsElement.textContent = `共找到 ${totalCount} 个产品，筛选后显示第 ${startItem} - ${endItem} 个，共 ${displayCount} 个`;
    }
}

// 分页功能
function updatePagination() {
    const paginationInfo = document.getElementById('paginationInfo');
    const paginationNumbers = document.getElementById('paginationNumbers');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');

    // 更新分页信息
    const startItem = (currentPage - 1) * itemsPerPage + 1;
    const endItem = Math.min(currentPage * itemsPerPage, filteredProducts.length);
    paginationInfo.textContent = `显示第 ${startItem}-${endItem} 项，共 ${filteredProducts.length} 项`;

    // 更新按钮状态
    prevBtn.disabled = currentPage <= 1;
    nextBtn.disabled = currentPage >= totalPages;

    // 生成页码按钮
    generatePageNumbers();
}

function generatePageNumbers() {
    const paginationNumbers = document.getElementById('paginationNumbers');
    paginationNumbers.innerHTML = '';

    if (totalPages <= 1) return;

    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

    // 调整起始页
    if (endPage - startPage + 1 < maxVisiblePages) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }

    // 添加第一页和省略号
    if (startPage > 1) {
        addPageButton(1);
        if (startPage > 2) {
            addEllipsis();
        }
    }

    // 添加页码按钮
    for (let i = startPage; i <= endPage; i++) {
        addPageButton(i);
    }

    // 添加省略号和最后一页
    if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
            addEllipsis();
        }
        addPageButton(totalPages);
    }
}

function addPageButton(pageNum) {
    const paginationNumbers = document.getElementById('paginationNumbers');
    const button = document.createElement('button');
    button.className = 'page-number' + (pageNum === currentPage ? ' active' : '');
    button.textContent = pageNum;
    button.onclick = () => goToPage(pageNum);
    paginationNumbers.appendChild(button);
}

function addEllipsis() {
    const paginationNumbers = document.getElementById('paginationNumbers');
    const ellipsis = document.createElement('span');
    ellipsis.className = 'page-ellipsis';
    ellipsis.textContent = '...';
    paginationNumbers.appendChild(ellipsis);
}

function goToPage(page) {
    if (page < 1 || page > totalPages || page === currentPage) return;
    currentPage = page;
    filterProducts();
}

function changeItemsPerPage() {
    const select = document.getElementById('itemsPerPage');
    itemsPerPage = parseInt(select.value);
    currentPage = 1; // 重置到第一页
    filterProducts();
}

function updateProductCount(count) {
    document.getElementById('productCount').textContent = count;
}

function openCostModal(productId) {
    currentProductId = productId;
    const product = productsData.find(p => p._id === productId);

    if (!product) return;

    const data = product.originalData;

    // 填充表单数据
    document.getElementById('vendorBody1').value = data.vendorBody1 || '';
    document.getElementById('costBody1').value = data.costBody1 || 0;
    document.getElementById('vendorBody2').value = data.vendorBody2 || '';
    document.getElementById('costBody2').value = data.costBody2 || 0;
    document.getElementById('vendorLED').value = data.vendorLED || '';
    document.getElementById('costLED').value = data.costLED || 0;
    document.getElementById('vendorDriver').value = data.vendorDriver || '';
    document.getElementById('costDriver').value = data.costDriver || 0;
    document.getElementById('vendorAssemble').value = data.vendorAssemble || '';
    document.getElementById('costAssemble').value = data.costAssemble || 0;
    document.getElementById('vendorOther').value = data.vendorOther || '';
    document.getElementById('costOther').value = data.costOther || 0;
    document.getElementById('vendorODM').value = data.vendorODM || '';
    document.getElementById('costODM').value = data.costODM || 0;

    // 添加输入监听器
    addCostInputListeners();

    // 计算初始总成本
    updateCostCalculation();

    // 显示弹出框
    document.getElementById('costModalOverlay').style.display = 'flex';
    document.body.style.overflow = 'hidden'; // 防止背景滚动
}

function closeCostModal() {
    document.getElementById('costModalOverlay').style.display = 'none';
    document.body.style.overflow = 'auto'; // 恢复背景滚动
    // 清空表单数据
    clearCostForm();
}

// 清空成本表单数据
function clearCostForm() {
    const inputs = [
        'vendorBody1', 'costBody1', 'vendorBody2', 'costBody2',
        'vendorLED', 'costLED', 'vendorDriver', 'costDriver',
        'vendorAssemble', 'costAssemble', 'vendorOther', 'costOther',
        'vendorODM', 'costODM', 'costNote'
    ];

    inputs.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.value = '';
        }
    });
}

function openPriceModal(productId) {
    currentProductId = productId;
    const product = productsData.find(p => p._id === productId);

    if (!product) return;

    const data = product.originalData;

    // 填充价格数据
    document.getElementById('unitPrice').value = data.pricing?.unitPrice || 0;

    // 显示弹出框（与成本模态框相同的方式）
    document.getElementById('priceModalOverlay').style.display = 'flex';
    document.body.style.overflow = 'hidden'; // 防止背景滚动
}

function closePriceModal() {
    document.getElementById('priceModalOverlay').style.display = 'none';
    document.body.style.overflow = 'auto'; // 恢复背景滚动
    // 清空表单数据
    document.getElementById('unitPrice').value = '';
}

// 检查是否有未保存的价格数据
function hasUnsavedPriceData() {
    const unitPrice = document.getElementById('unitPrice').value.trim();
    return unitPrice !== '';
}

// 检查是否有未保存的密码数据
function hasUnsavedPasswordData() {
    const currentPassword = document.getElementById('currentPassword').value;
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    return (currentPassword && currentPassword.trim() !== '') ||
           (newPassword && newPassword.trim() !== '') ||
           (confirmPassword && confirmPassword.trim() !== '');
}

// 检查是否有未保存的成本数据
function hasUnsavedCostData() {
    const inputs = [
        'vendorBody1', 'costBody1', 'vendorBody2', 'costBody2',
        'vendorLED', 'costLED', 'vendorDriver', 'costDriver',
        'vendorAssemble', 'costAssemble', 'vendorOther', 'costOther',
        'vendorODM', 'costODM', 'costNote'
    ];

    return inputs.some(id => {
        const element = document.getElementById(id);
        return element && element.value.trim() !== '';
    });
}

async function savePriceData() {
    const unitPrice = parseFloat(document.getElementById('unitPrice').value) || 0;

    const priceData = {
        unitPrice: unitPrice
    };

    try {
        const response = await fetch(`/api/cost-pricing/${currentProductId}/pricing`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(priceData)
        });

        if (response.ok) {
            alert('价格数据保存成功！');
            closePriceModal();
            // 保存当前筛选状态，重新加载数据后恢复
            await loadProductsDataWithStatePreservation();
        } else {
            alert('保存失败，请重试');
        }
    } catch (error) {
        console.error('保存价格数据时出错:', error);
        alert('保存失败，请重试');
    }
}

// 模态框交互设置 - 改进用户体验
document.addEventListener('DOMContentLoaded', function() {
    const costOverlay = document.getElementById('costModalOverlay');
    const priceOverlay = document.getElementById('priceModalOverlay');

    // 移除点击背景关闭功能，防止意外数据丢失
    // 用户必须明确点击"取消"按钮或"X"关闭按钮来关闭模态框

    // 保留ESC键关闭功能（可选择性保留或移除）
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            // 检查修改密码模态框
            const passwordOverlay = document.getElementById('changePasswordModalOverlay');
            if (passwordOverlay && passwordOverlay.style.display === 'flex') {
                if (hasUnsavedPasswordData()) {
                    if (confirm('您有未保存的密码数据，确定要关闭吗？')) {
                        closeChangePasswordModal();
                    }
                } else {
                    closeChangePasswordModal();
                }
            } else if (costOverlay.style.display === 'flex') {
                // 检查是否有未保存的数据
                if (hasUnsavedCostData()) {
                    if (confirm('您有未保存的成本数据，确定要关闭吗？')) {
                        closeCostModal();
                    }
                } else {
                    closeCostModal();
                }
            } else if (priceOverlay.style.display === 'flex') {
                // 检查是否有未保存的价格数据
                if (hasUnsavedPriceData()) {
                    if (confirm('您有未保存的价格数据，确定要关闭吗？')) {
                        closePriceModal();
                    }
                } else {
                    closePriceModal();
                }
            }
        }
    });
});

function addCostInputListeners() {
    const costInputs = ['costBody1', 'costBody2', 'costLED', 'costDriver', 'costAssemble', 'costOther', 'costODM'];

    costInputs.forEach(id => {
        document.getElementById(id).addEventListener('input', updateCostCalculation);
    });
}

function updateCostCalculation() {
    const odmCost = parseFloat(document.getElementById('costODM').value) || 0;
    const body1 = parseFloat(document.getElementById('costBody1').value) || 0;
    const body2 = parseFloat(document.getElementById('costBody2').value) || 0;
    const led = parseFloat(document.getElementById('costLED').value) || 0;
    const driver = parseFloat(document.getElementById('costDriver').value) || 0;
    const assemble = parseFloat(document.getElementById('costAssemble').value) || 0;
    const other = parseFloat(document.getElementById('costOther').value) || 0;

    let totalCost;
    let method;

    if (odmCost > 0) {
        // 方法2：ODM模式
        totalCost = odmCost;
        method = '方法2：ODM模式';
    } else {
        // 方法1：组装模式
        totalCost = body1 + body2 + led + driver + assemble + other;
        method = '方法1：组装模式';
    }

    document.getElementById('calcMethod').textContent = method;
    document.getElementById('calcTotal').textContent = `¥${totalCost.toFixed(2)}`;
}

async function saveCostData() {
    if (!currentProductId) return;

    try {
        // 按照ExistingProductService.updateProductCosts期望的格式构造数据
        const costData = {
            body1: {
                vendor: document.getElementById('vendorBody1').value,
                cost: parseFloat(document.getElementById('costBody1').value) || 0
            },
            body2: {
                vendor: document.getElementById('vendorBody2').value,
                cost: parseFloat(document.getElementById('costBody2').value) || 0
            },
            led: {
                vendor: document.getElementById('vendorLED').value,
                cost: parseFloat(document.getElementById('costLED').value) || 0
            },
            driver: {
                vendor: document.getElementById('vendorDriver').value,
                cost: parseFloat(document.getElementById('costDriver').value) || 0
            },
            assemble: {
                vendor: document.getElementById('vendorAssemble').value,
                cost: parseFloat(document.getElementById('costAssemble').value) || 0
            },
            other: {
                vendor: document.getElementById('vendorOther').value,
                cost: parseFloat(document.getElementById('costOther').value) || 0
            },
            odm: {
                vendor: document.getElementById('vendorODM').value,
                cost: parseFloat(document.getElementById('costODM').value) || 0
            }
        };

        const response = await fetch(`/api/cost-pricing/${currentProductId}/costs`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(costData)
        });

        const result = await response.json();

        if (result.success) {
            showSuccess('成本数据保存成功！');

            // 关闭弹出框
            closeCostModal();

            // 重新加载数据并保持筛选状态
            await loadProductsDataWithStatePreservation();
        } else {
            showError('保存失败：' + result.message);
        }
    } catch (error) {
        console.error('保存成本数据失败:', error);
        showError('保存失败，请重试');
    }
}

function refreshData() {
    loadProductsDataWithStatePreservation();
}

// 修改密码和邮箱功能
async function openChangePasswordModal() {
    document.getElementById('changePasswordModalOverlay').style.display = 'flex';
    document.body.style.overflow = 'hidden';

    // 清空表单
    document.getElementById('currentPassword').value = '';
    document.getElementById('newPassword').value = '';
    document.getElementById('confirmPassword').value = '';
    document.getElementById('newEmail').value = '';

    // 加载当前邮箱
    try {
        const response = await fetch('/api/auth/me');
        const result = await response.json();
        if (result.success && result.data) {
            document.getElementById('currentEmail').value = result.data.email || '未设置';
        }
    } catch (error) {
        console.error('获取用户信息失败:', error);
        document.getElementById('currentEmail').value = '获取失败';
    }
}

function closeChangePasswordModal() {
    document.getElementById('changePasswordModalOverlay').style.display = 'none';
    document.body.style.overflow = 'auto';
    // 清空表单
    document.getElementById('currentPassword').value = '';
    document.getElementById('newPassword').value = '';
    document.getElementById('confirmPassword').value = '';
    document.getElementById('currentEmail').value = '';
    document.getElementById('newEmail').value = '';
}

async function saveAccountChanges() {
    const currentPassword = document.getElementById('currentPassword').value;
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    const newEmail = document.getElementById('newEmail').value;

    // 检查是否有任何修改
    const hasPasswordChange = newPassword || confirmPassword;
    const hasEmailChange = newEmail && newEmail.trim() !== '';

    if (!hasPasswordChange && !hasEmailChange) {
        alert('请至少修改密码或邮箱中的一项');
        return;
    }

    // 验证当前密码（必须提供）
    if (!currentPassword) {
        alert('请输入当前密码以验证身份');
        return;
    }

    // 如果要修改密码，进行密码验证
    if (hasPasswordChange) {
        if (!newPassword || !confirmPassword) {
            alert('请填写完整的新密码信息');
            return;
        }

        if (newPassword !== confirmPassword) {
            alert('新密码和确认密码不匹配');
            return;
        }

        if (newPassword.length < 6) {
            alert('新密码长度至少为6位');
            return;
        }

        if (newPassword === currentPassword) {
            alert('新密码不能与当前密码相同');
            return;
        }
    }

    // 如果要修改邮箱，进行邮箱验证
    if (hasEmailChange) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(newEmail)) {
            alert('请输入有效的邮箱地址');
            return;
        }
    }

    try {
        const requestData = {
            currentPassword
        };

        if (hasPasswordChange) {
            requestData.newPassword = newPassword;
        }

        if (hasEmailChange) {
            requestData.email = newEmail;
        }

        const response = await fetch('/api/auth/me', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        });

        const result = await response.json();

        if (response.ok && result.success) {
            let message = '账户信息修改成功！';
            if (hasPasswordChange && hasEmailChange) {
                message = '密码和邮箱修改成功！';
            } else if (hasPasswordChange) {
                message = '密码修改成功！';
            } else if (hasEmailChange) {
                message = '邮箱修改成功！';
            }
            alert(message);
            closeChangePasswordModal();
        } else {
            alert(result.message || '修改失败，请重试');
        }
    } catch (error) {
        console.error('修改账户信息时出错:', error);
        alert('修改失败，请检查网络连接');
    }
}

function exportData() {
    // 导出功能实现
    const csvContent = generateCSV(productsData);
    downloadCSV(csvContent, 'product-costs.csv');
}

function generateCSV(products) {
    const headers = ['产品型号', '总成本', '含税价', '毛利', '毛利率'];
    const rows = products.map(product => {
        const totalCost = calculateTotalCost(product);
        const unitPrice = product.originalData.pricing?.unitPrice || 0;
        const profit = unitPrice - totalCost;
        const profitMargin = totalCost > 0 ? (((unitPrice - totalCost) / unitPrice) * 100) : 0;

        return [
            `"${product.originalData.model || ''}"`,
            `"${totalCost.toFixed(2)}"`,
            `"${unitPrice.toFixed(2)}"`,
            `"${profit.toFixed(2)}"`,
            `"${profitMargin.toFixed(1)}%"`
        ];
    });

    return [headers.map(h => `"${h}"`), ...rows].map(row => row.join(',')).join('\r\n');
}

function downloadCSV(content, filename) {
    // Add BOM for proper UTF-8 encoding in Excel
    const BOM = '\uFEFF';
    const blob = new Blob([BOM + content], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    link.click();
}

function showLoading(show) {
    document.getElementById('loadingState').style.display = show ? 'block' : 'none';
}

function showSuccess(message) {
    // 可以使用 toast 或其他通知方式
    alert(message);
}

function showError(message) {
    // 可以使用 toast 或其他通知方式
    alert(message);
}
</script>
